{
 :default  {:impl :ollama :streaming false :model "llama3.1"}
 :philo    {}
 :positive {:format
            {:type       "object"
             :required   [:answer :why]
             :properties {:why    {:type "string"}
                          :answer {:type "string" :enum ["yes" "no" "i don't know"]}}}}

 :gpt-oss  {:impl :chatgpt :model "gpt-oss" :url "http://192.168.100.9:11434/v1"}
 :gpt-pp   [:gpt-oss :positive]

 :print-test
 {:start :pipeline-end
  :steps
  {:pipeline-end {:tool :notify
                  :message "âœ… Pipeline ends."
                  :terminal? true}}
  :tools
  {:notify {:fn pyjama.tools/notify-user
            :args {:channel "stdout"}}}}

 :pp
 {:start      :philo
  :max-steps  12

  :steps
  {:philo        {:impl   :ollama :model "llama3.1"
                  :prompt "Reflect on: {{prompt}}"
                  :next   :positive}                        ; static transition

   :positive     {:impl   :ollama
                  :format {:type       "object"
                           :required   [:answer :why]
                           :properties {:answer {:type "string" :enum ["yes" "no" "i don't know"]}
                                        :why    {:type "string"}}}
                  ;; conditional routes based on last observation
                  :routes [
                           {:when [:= [:obs :answer] "yes"] :next :celebrate}
                           {:when [:= [:obs :answer] "no"] :next :probe}
                           {:else :pipeline-end}]}


   :probe        {:impl :ollama :prompt "Ask one clarifying question." :next :positive}
   :celebrate    {:tool    :notify
                  :message "ðŸŽ‰ Pipeline succeeded â€” ending now."}

   :done         {:terminal? true}

   :pipeline-end {:tool      :notify
                  :message   "âœ… Pipeline ends."
                  :terminal? true}
   }

  ;; optional controller: LLM decides next step when :next/:routes absent
  :controller {:impl   :chatgpt :model "gpt-oss"
               :system "You decide the next action from: {{choices}} given observation {{obs}}."}

  ;; optional tool registry
  :tools      {:notify {:fn   pyjama.tools/notify-user
                        :args {:channel "stdout"}}}}}
